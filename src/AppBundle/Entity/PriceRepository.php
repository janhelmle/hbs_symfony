<?php

namespace AppBundle\Entity;

use DateTime;
use DateInterval;
use DatePeriod;

/**
 * PriceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PriceRepository extends \Doctrine\ORM\EntityRepository {

    public function findLatestPricePerProductAndDateTime(Product $prod, DateTime $date) { // returns Price object or NULL
        $em = $this->getEntityManager();

        $query = $em->createQuery(
                'SELECT pri FROM AppBundle:price pri JOIN pri.product prod WHERE prod.identifier = ?1 ORDER BY pri.date DESC'
        );
        $query->setParameter(1, $prod->getIdentifier());

        $prices = $query->getResult(); // Array of Price Objects

        foreach ($prices as $price) { // laufe durch Price Array vom Neuesten zum Aeltesten
            if ($price->getDate() <= $date) { // passenden Preis gefunden
                return $price;
            }
        }

        return NULL; // keinen Preis gefunden
    }

    public function calculateTotalAmountPerProductAndDateInterval(Product $prod, DateTime $checkIn, DateTime $checkOut) { // returns double
        $em = $this->getEntityManager();

        $sum = 0;

        $interval = new DateInterval('P1D'); // 1 Tag
        $daterange = new DatePeriod($checkIn, $interval, $checkOut);

        foreach ($daterange as $date) {
            $sum += $em->getRepository('AppBundle:Price')->findLatestPricePerProductAndDateTime($prod, $date)->getValue();
        }

        return $sum;
    }

    public function calculatePriceAveragePerProductAndDateInterval(Product $prod, DateTime $checkIn, DateTime $checkOut) { // returns double
        $em = $this->getEntityManager();

        $sum = 0;
        $days = 0;
        $avg = 0;

        $interval = new DateInterval('P1D'); // 1 Tag
        $daterange = new DatePeriod($checkIn, $interval, $checkOut);

        foreach ($daterange as $date) {
            $days += 1;
            $sum += $em->getRepository('AppBundle:Price')->findLatestPricePerProductAndDateTime($prod, $date)->getValue();
        }

        $avg = round($sum / $days, 2); // auf 2 Nachkommastellen gerundet

        return $avg; // arithmetischer Mittelwert
    }

}
